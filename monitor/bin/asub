#!PYTHONPATH
# -*- coding: utf-8 -*-

import os
import re
import sys
import getpass

sys.path.append('MONITORPATH')
from common import common
from common import sqlite3_common
from conf import config

os.environ["PYTHONUNBUFFERED"]="1"

class asub():
    def __init__(self):
        self.user = getpass.getuser()
        self.currentDir = os.getcwd()

    def parseArgs(self):
        jobNameCompile = re.compile('^-J$')
        processorCompile = re.compile('^-n$')
        resourceCompile = re.compile('^-R$')
        rusageCompile = re.compile('rusage')

        self.jobNameSet = False
        self.processorSet = False
        self.resourceSet = False
        self.resource = ''
        self.rusageSet = False

        self.bsubCommandList = []
        self.command = sys.argv[-1]

        for i in range(1, len(sys.argv)):
            argument = sys.argv[i]

            if jobNameCompile.match(argument):
                self.jobNameSet = True

            if processorCompile.match(argument):
                self.processorSet = True
                print('*Warning*: Find cpu reservation setting on asub arguments, will not reset it.')

            if resourceCompile.match(argument):
                self.resourceSet = True
                continue
            else:
                if self.resourceSet and (self.resource == ''):
                    self.resource = argument

                    if rusageCompile.search(argument):
                        self.rusageSet = True
                        print('*Warning*: Find memory reservation setting on asub arguments, will not reset it.')
                        self.bsubCommandList.append('-R')
                        argument = '"' + str(argument) + '"'

            self.bsubCommandList.append(argument)

    def getUserResourceData(self):
        """
        There are four kinds of history job resource data on sqlite database:
        CPU_AVG  : average cpu usage for specified job.
        CPU_PEAK : peak cpu usage for specified job.
        MEM_AVG  : average memory usage for specified job.
        MEM_PEAK : peak memory usage for specified job.

        Default policy:
        1. Find CWD and COMMAND history data on the sqlite database;
           Select peak CPU_AVG and peak MEM_PEAK.
        2. Find COMMAND (but no CWD) history data on the sqlite database;
           Select average CPU_AVG and average MEM_PEAK.
        3. Not find CWD or COMMAND history data on the dqlite database;
           Do not add cpu/memory reservation setting.
        """
        self.userCpuUsage = 0
        self.userMemUsage = 0
        mark = 3
        userCommandCpuUsageList = []
        userCommandMemUsageList = []

        dbFile = str(config.dbPath) + '/resource/user/' + str(self.user) + '.db'
        (result, dbConn) = sqlite3_common.connectDbFile(dbFile)

        if result != 'passed':
            print('*Error*: Failed on connecting sqlite3 database "' + str(dbFile) + '".')
            print('         Will not add cpu/memory reservation setting.')
            print('         Please contact asub administrator for further check.')
        else:
            tableList = sqlite3_common.getSqlTableList(dbFile, dbConn)
            tableName = self.user
            dataDic = sqlite3_common.getSqlTableData(dbFile, dbConn, tableName)

            if not dataDic:
                print('*Warning*: Not find any history data for user "' + str(self.user) + '".')
                print('           Will not add cpu/memory reservation setting.')
            else:
                for i in range(len(dataDic['COMMAND'])):
                    status = dataDic['STATUS'][i].strip()

                    if status == 'DONE':
                        cwd = dataDic['CWD'][i].strip()
                        command = dataDic['COMMAND'][i].strip()
                        cpuAvg = dataDic['CPU_AVG'][i].strip()

                        if cpuAvg != 'NA':
                            cpuAvg = int(float(cpuAvg)) + 1

                        memPeak = dataDic['MEM_PEAK'][i].strip()

                        if memPeak != 'NA':
                            memPeak = re.sub('G', '', memPeak)
                            memPeak = int(1000*float(memPeak))

                        if (cwd == self.currentDir) and (command == self.command):
                            mark = 1
                            if cpuAvg != 'NA':
                                self.userCpuUsage = max(self.userCpuUsage, cpuAvg)
                            if memPeak != 'NA':
                                self.userMemUsage = max(self.userMemUsage, memPeak)
                        elif command == self.command:
                            if mark != 1:
                                mark = 2
                            if cpuAvg != 'NA':
                                userCommandCpuUsageList.append(cpuAvg)
                            if memPeak != 'NA':
                                userCommandMemUsageList.append(memPeak)

                if mark == 1:
                    print('Find CWD and COMMAND history data on sqlite database.')
                elif mark == 2:
                    print('Find COMMAND history data on sqlite database.')
                elif mark == 3:
                    print('Not find CWD or COMMAND history data on sqlite database.')

                if self.userCpuUsage == 0:
                    if len(userCommandCpuUsageList) > 0:
                        self.userCpuUsage = int(sum(userCommandCpuUsageList)/len(userCommandCpuUsageList))
                        print('    Average of job CPU_AVG : ' + str(self.userCpuUsage))
                    else:
                        print('*Warning*: Not get history cpu data from sqlite database.')
                else:
                    print('    Peak of job CPU_AVG : ' + str(self.userCpuUsage))

                if self.userMemUsage == 0:
                    if len(userCommandMemUsageList) > 0:
                        self.userMemUsage = int(sum(userCommandMemUsageList)/len(userCommandMemUsageList))
                        print('    Average of job MEM_PEAK : ' + str(self.userMemUsage))
                    else:
                        print('*Warning*: Not get history memory data from sqlite database.')
                else:
                    print('    Peak of job MEM_PEAK : ' + str(self.userMemUsage))

    def setProcessor(self):
        if self.userCpuUsage >= 2:
            print('Add cpu reservation "' + str(self.userCpuUsage) + '" into bsub setting.')
            self.bsubCommand = str(self.bsubCommand) + ' -n ' + str(self.userCpuUsage)

    def setRusage(self):
        if self.userMemUsage != 0:
            print('Add memory reservation "' + str(self.userMemUsage) + '" into bsub setting.')

            if self.resourceSet:
                self.resource = str(self.resource) + ' rusage[mem=' + str(self.userMemUsage) + ']'
                self.bsubCommand = str(self.bsubCommand) + ' -R "' + str(self.resource) + '"'
            else:
                self.bsubCommand = str(self.bsubCommand) + ' -R "span[hosts=1] rusage[mem=' + str(self.userMemUsage) + ']"'

    def addOriginalSetting(self):
        emptySpaceCompile = re.compile('\s+')
        apostropheCompile = re.compile("'")
        doubleQuotesCompile = re.compile('"')

        for argument in self.bsubCommandList:
            if emptySpaceCompile.search(argument):
                if apostropheCompile.search(argument) and not doubleQuotesCompile.search(argument):
                    argument = '"' + str(argument) + '"'
                elif not apostropheCompile.search(argument) and doubleQuotesCompile.search(argument):
                    argument = "'" + str(argument) + "'"
                elif not apostropheCompile.search(argument) and not doubleQuotesCompile.search(argument):
                    argument = '"' + str(argument) + '"'

            self.bsubCommand = str(self.bsubCommand) + ' ' + str(argument)

    def runBsub(self):
        try:
            os.system(self.bsubCommand)
        except Exception as error:
            print('*Error*: Failed on running below bsub command.')
            print('         ' + str(self.bsubCommand))

    def asub(self):
        print('Notice:')
        print('1. asub is a wrapper of bsub.')
        print('2. asub only help you set cpu&memory reservation if they are not specified.')
        print('   You should set other bsub setting by yourself.')
        print('3. Job command must be with double quotes "" like below:')
        print('   bsub *** "COMMAND"')
        print('')

        self.parseArgs()
        self.bsubCommand = 'bsub'

        if not self.jobNameSet:
            self.bsubCommand = str(self.bsubCommand) + ' -J ASUB'

        if (not self.processorSet) or (not self.rusageSet):
            self.getUserResourceData()

            if not self.processorSet:
                self.setProcessor()

            if not self.rusageSet:
                self.setRusage()

        self.addOriginalSetting()

        print('*Notice*: Final bsub setting is as below.')
        print('          ' + str(self.bsubCommand))
        print('')

        self.runBsub()

################
# Main Process #
################
def main():
    myAsub = asub()
    myAsub.asub()

if __name__ == '__main__':
    main()
